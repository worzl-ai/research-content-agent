name: Deploy to Google Cloud Run

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PROJECT_ID: ${{ secrets.GCP_PROJECT_ID }}
  SERVICE_NAME: research-content-agent
  REGION: us-central1

jobs:
  deploy:
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'

    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        if [ -f requirements.txt ]; then pip install -r requirements.txt; fi

    - name: Run tests
      run: |
        if [ -f "tests/test_*.py" ]; then
          python -m pytest tests/ -v
        else
          echo "No tests found, skipping..."
        fi

    - name: Authenticate to Google Cloud
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_SERVICE_ACCOUNT_KEY }}

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v1

    - name: Configure Docker for GCR
      run: gcloud auth configure-docker

    - name: Create Dockerfile if not exists
      run: |
        if [ ! -f Dockerfile ]; then
          cat > Dockerfile << 'EOF'
        FROM python:3.11-slim

        WORKDIR /app

        COPY requirements.txt .
        RUN pip install --no-cache-dir -r requirements.txt

        COPY . .

        EXPOSE 8080

        CMD ["python", "-m", "uvicorn", "src.main:app", "--host", "0.0.0.0", "--port", "8080"]
        EOF
        fi

    - name: Create .dockerignore if not exists
      run: |
        if [ ! -f .dockerignore ]; then
          cat > .dockerignore << 'EOF'
        __pycache__
        *.pyc
        *.pyo
        *.pyd
        .Python
        env
        pip-log.txt
        pip-delete-this-directory.txt
        .tox
        .coverage
        .coverage.*
        .cache
        nosetests.xml
        coverage.xml
        *.cover
        *.log
        .git
        .mypy_cache
        .pytest_cache
        .hypothesis
        .gitignore
        README.md
        .DS_Store
        .vscode
        venv/
        __pycache__/
        *.md
        tests/
        EOF
        fi

    - name: Build and Deploy to Cloud Run
      run: |
        gcloud run deploy $SERVICE_NAME \
          --source . \
          --platform managed \
          --region $REGION \
          --allow-unauthenticated \
          --set-env-vars="PORT=8080" \
          --memory=1Gi \
          --cpu=1 \
          --max-instances=10 \
          --timeout=300 \
          --project=$PROJECT_ID

    - name: Get service URL
      run: |
        SERVICE_URL=$(gcloud run services describe $SERVICE_NAME --region=$REGION --format='value(status.url)')
        echo "Service deployed at: $SERVICE_URL"
        echo "SERVICE_URL=$SERVICE_URL" >> $GITHUB_ENV

    - name: Test deployment
      run: |
        sleep 30
        curl -f $SERVICE_URL/health || echo "Health check failed, but deployment may still be successful"
